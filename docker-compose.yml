version: "3.8"
services:
  db:
    image: postgres:14-alpine
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Hôte: 5433, Conteneur: 5432
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - backend

  backend:
    build: ./backend
    container_name: backend
    env_file:
      - ./.env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      KAFKA_BROKER: ${KAFKA_BROKER}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
    depends_on:
      - db
      - kafka
    ports:
      - "8000:8000"
    networks:
      - backend
    command:
      [
        "/wait-for-it.sh",
        "db:5432",
        "--",
        "/wait-for-it.sh",
        "kafka:9092",
        "--",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
      ]

  frontend:
    build: ./frontend
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "8080:8080"
    environment:
      - API_URL=http://backend:8000 # Pour les requêtes serveur vers backend
      - BACKEND_URL=http://localhost:8000 # Pour les requêtes client depuis le navigateur
      - FLASK_SECRET_KEY=supersecretkey
    networks:
      - backend

  watch:
    image: alpine
    container_name: watch
    volumes:
      - ./backend:/src/backend
      - ./frontend:/src/frontend
    command: >
      sh -c "while true; do
      inotifywait -r -e modify,create,delete /src/backend /src/frontend;
      echo 'Files changed. Triggering restart...';
      done"
    networks:
      - backend

networks:
  backend:

volumes:
  db_data:
